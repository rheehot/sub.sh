#!/usr/bin/env bash
# vim:ft=sh:et:ts=2:sw=2:sts=2:

# Aliases.
alias sudo="sudo -E"
alias rm="rm -i"
alias ll="ls -l"
alias vim="vim -b"
alias vi="vim -b"
alias pt="ptpython"
alias sub.sh="curl -sL sub.sh | bash -s -"

# Usage: clean
#
# Remove temporary files such as Vim swap or pyc.
#
clean() {
  local regex
  regex=".*\.(sw[ponml]|py[co])$"

  find . -regextype posix-egrep -regex "$regex" -delete -print
}

# Sanify terminal input/output.
# https://unix.stackexchange.com/questions/79684
alias fix='reset; stty sane; tput rs1; clear; echo -e "\033c"'

# Attach or create a tmux session.
alias tm="tmux -2 a -d || tmux -2"

# Usage: i [FORMAT]
#
# Get the current tmux pane index (zero-based). The index is -1 out of a tmux
# session.
#
i() {
  local pane_index

  if [[ -n "$TMUX_PANE" ]]; then
    pane_index="$(tmux display -pt "$TMUX_PANE" '#{pane_index}')"
  else
    pane_index=0
  fi

  # shellcheck disable=SC2059
  # See also: https://github.com/koalaman/shellcheck/wiki/SC2059
  printf "${1:-%d}\n" "$((pane_index-1))"
}

# Usage: x N COMMAND ARGS...
#
# Run COMMAND over N panes in a new tmux window. "{}" in arguments are replaced
# with the index (zero-based). The indexes are also allocated to "$X" in each
# tmux pane.
#
# Examples:
#   x 5 deploy {}.subl.ee
#   x 5 'sleep {}; echo done'
#   x 5 python -c 'import os; print(os.getenv("X"))'
#
x() {
  # Thanks to @yeonghoey.
  local n
  local window
  local cmd
  local cmd_in_tmux
  local i
  local arg

  if [[ "$#" -le 1 ]]; then
    echo 'Usage: x N COMMAND ARGS...'
    return 1
  fi

  n=$1
  shift

  # shellcheck disable=SC2124
  window="x $n $1"

  for i in $(seq 0 "$((n-1))"); do
    declare -a cmd
    unset cmd
    for arg in "$@"; do
      arg="${arg//\{\}/$i}"
      cmd+=("$(printf %q "$arg")")
      #                └─ format to be reused as shell input
    done

    cmd_in_tmux="(X=$i ${cmd[*]}); read"
    #                               └─ tmux panes remain on exit

    if [[ "$i" -eq 0 ]]; then
      tmux new-window -n "$window" "$cmd_in_tmux"
    else
      tmux split-window -t "$window" "$cmd_in_tmux"
      tmux select-layout -t "$window" tiled
    fi
  done

  if [[ -z "$TMUX" ]]; then
    tmux attach-session
  fi

  # Print the window name as result.
  echo "$window"
}

# Usage: subsh-hostname
#
# Print the hostname. "hostname -s" is used to retrieve the hostname.
# It can be overridden by $SUBSH_HOSTNAME.
#
subsh-hostname() {
  echo "${SUBSH_HOSTNAME:-$(hostname -s)}"
}

# Usage: subsh-hostcolor <<< INPUT
#
# Colorize the input with the hostcolor. The hostcolor is automatically
# determined based on "subsh-hostname". The color can be overridden by
# $SUBSH_HOSTCOLOR.
#
subsh-hostcolor() {
  local color

  if [[ -n "$SUBSH_HOSTCOLOR" ]]; then
    color="$SUBSH_HOSTCOLOR"
  else
    # Hash hostname with a number to colorize.
    local sum
    readonly hostname="$(subsh-hostname)"
    for (( i=0; i<${#hostname}; i++ )); do
      (( sum+=$(printf "%d" "'${hostname:$i:1}'") ))
    done

    # Choose a color except blue (4).
    color="$((sum%5+1))"
    if [[ "$color" -eq 4 ]]; then
      color=6
    fi
  fi

  local input
  read -r input

  tput setaf "$color"
  echo -n "$input"
  tput sgr0
}
